use rand::Rng;

pub enum TetrisBricks {
    Square,
    Line,
    L,
    InvL,
    StairsL,
    StairsR,
    SmallT,
}

pub fn gen_random_tetris_body() -> Vec<i32> {
    let mut rng = rand::thread_rng();
    let kind = match rng.gen_range(0..6) {
        0 => TetrisBricks::InvL,
        1 => TetrisBricks::L,
        2 => TetrisBricks::Line,
        3 => TetrisBricks::SmallT,
        4 => TetrisBricks::Square,
        5 => TetrisBricks::StairsL,
        6 => TetrisBricks::StairsR,
        _ => panic!("Random Number for Tetris brick selection out of bounce"),
    };
    gen_tetris_body(kind)
}

pub fn gen_tetris_body(kind: TetrisBricks) -> Vec<i32> {
    match kind {
        TetrisBricks::Square => gen_square_body(),
        TetrisBricks::Line => gen_line_body(),
        TetrisBricks::L => gen_l_body(),
        TetrisBricks::InvL => gen_inv_l_body(),
        TetrisBricks::StairsL => gen_stairs_l_body(),
        TetrisBricks::StairsR => gen_stairs_r_body(),
        TetrisBricks::SmallT => gen_t_body(),
    }
}

pub fn gen_square_body() -> Vec<i32> {
    vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 1, 0, 0, 0, //
        0, 0, 0, 0, 1, 1, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
    ]
}

pub fn gen_line_body() -> Vec<i32> {
    vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
    ]
}

pub fn gen_l_body() -> Vec<i32> {
    vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 1, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
    ]
}

pub fn gen_inv_l_body() -> Vec<i32> {
    vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 1, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
    ]
}

pub fn gen_stairs_l_body() -> Vec<i32> {
    vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 1, 0, 0, 0, //
        0, 0, 0, 1, 1, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
    ]
}

pub fn gen_stairs_r_body() -> Vec<i32> {
    vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 1, 0, 0, 0, //
        0, 0, 0, 0, 0, 1, 1, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
    ]
}

pub fn gen_t_body() -> Vec<i32> {
    vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 1, 0, 0, 0, 0, //
        0, 0, 0, 1, 1, 1, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
        0, 0, 0, 0, 0, 0, 0, 0, 0, //
    ]
}

pub mod prototype {
    pub fn gen_blob_body() -> Vec<i32> {
        vec![
            0, 0, 1, 0, 0, 0, 0, 0, 0, //
            0, 1, 1, 1, 1, 0, 1, 1, 0, //
            0, 1, 0, 0, 1, 1, 1, 0, 0, //
            0, 1, 1, 1, 1, 0, 1, 1, 1, //
            0, 1, 0, 0, 1, 0, 1, 1, 1, //
            0, 1, 0, 0, 1, 1, 1, 0, 0, //
            0, 0, 0, 1, 1, 1, 0, 0, 0, //
            0, 0, 0, 0, 0, 0, 0, 0, 0, //
            0, 0, 0, 0, 0, 0, 0, 0, 0, //
        ]
    }
    
    pub fn gen_target_body() -> Vec<i32> {
        vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, //
            0, 0, 0, 0, 0, 0, 0, 0, 0, //
            0, 0, 0, 0, 0, 0, 0, 0, 0, //
            0, 0, 0, 0, 0, 0, 0, 0, 0, //
            0, 0, 0, 0, 1, 1, 0, 0, 0, //
            0, 0, 0, 1, 1, 0, 0, 0, 0, //
            0, 0, 0, 1, 1, 1, 1, 0, 0, //
            0, 0, 1, 1, 0, 0, 1, 1, 0, //
            0, 0, 1, 1, 0, 0, 1, 1, 0, //
        ]
    }
}